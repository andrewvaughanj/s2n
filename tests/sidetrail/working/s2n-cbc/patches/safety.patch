diff --git a/tests/sidetrail/working/s2n-cbc/utils/s2n_safety.c b/tests/sidetrail/working/s2n-cbc/utils/s2n_safety.c
index 630f13ef..32004681 100644
--- a/tests/sidetrail/working/s2n-cbc/utils/s2n_safety.c
+++ b/tests/sidetrail/working/s2n-cbc/utils/s2n_safety.c
@@ -57,8 +57,8 @@ pid_t s2n_actual_getpid()
  */
 int s2n_constant_time_equals(const uint8_t * a, const uint8_t * b, uint32_t len)
 {
-    S2N_PUBLIC_INPUT(a);
-    S2N_PUBLIC_INPUT(b);
+  //S2N_PUBLIC_INPUT(a);
+  //S2N_PUBLIC_INPUT(b);
     S2N_PUBLIC_INPUT(len);
     
     uint8_t xor = 0;
diff --git a/tests/sidetrail/working/s2n-cbc/utils/s2n_safety.h b/tests/sidetrail/working/s2n-cbc/utils/s2n_safety.h
index 1c754ecc..6bcc86ca 100644
--- a/tests/sidetrail/working/s2n-cbc/utils/s2n_safety.h
+++ b/tests/sidetrail/working/s2n-cbc/utils/s2n_safety.h
@@ -23,6 +23,8 @@
 
 #include "error/s2n_errno.h"
 
+void __VERIFIER_assume(int);
+
 /* NULL check a pointer */
 #define notnull_check( ptr )           do { if ( (ptr) == NULL ) { S2N_ERROR(S2N_ERR_NULL); } } while(0)
 #define notnull_check_ptr( ptr )       do { if ( (ptr) == NULL ) { S2N_ERROR_PTR(S2N_ERR_NULL); } } while(0)
@@ -72,8 +74,8 @@ static inline void* trace_memcpy_check(void *restrict to, const void *restrict f
 
 /* Range check a number */
 #define gte_check(n, min)  do { if ( (n) < min ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
-#define lte_check(n, max)  do { if ( (n) > max ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
-#define gt_check(n, min)  do { if ( (n) <= min ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
+#define lte_check(n, max)  __VERIFIER_assume( (n) <= (max) )
+#define gt_check(n, min)   __VERIFIER_assume( (n) >  (min) )
 #define lt_check(n, max)  do { if ( (n) >= max ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
 #define eq_check(a, b)  do { if ( (a) != (b) ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
 #define ne_check(a, b)  do { if ( (a) == (b) ) { S2N_ERROR(S2N_ERR_SAFETY); } } while(0)
@@ -93,7 +95,7 @@ static inline void* trace_memcpy_check(void *restrict to, const void *restrict f
 /* Check for specific classes of errors */
 #define ERR_IS_BLOCKING( x )    ( x == S2N_ERR_BLOCKED || x == S2N_CALLBACK_BLOCKED )
 
-#define GUARD( x )              do {if ( (x) < 0 ) return S2N_FAILURE;} while (0)
+#define GUARD( x ) __VERIFIER_assume( (x) >= 0 )
 #define GUARD_STRICT( x )       do {if ( (x) != 0 ) return S2N_FAILURE;} while (0)
 #define GUARD_GOTO( x , label ) do {if ( (x) < 0 ) goto label;} while (0)
 #define GUARD_PTR( x )          do {if ( (x) < 0 ) return NULL;} while (0)
